// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders                   Order[]
  inventoryRecords         InventoryRecord[]
  notificationPreferences  NotificationPreference[]
  languagePreference       UserLanguagePreference?
  createdTranslations      Translation[] @relation("TranslationCreator")
  updatedTranslations      Translation[] @relation("TranslationUpdater")

  // 商业化相关关系
  pluginLicenses          PluginLicense[]
  subscriptions           Subscription[]

  // SaaS 和模板相关关系
  saasInstances           SaasInstance[]
  templatePurchases       TemplatePurchase[]

  // OAuth 2.0 和社交登录相关关系
  socialAccounts          SocialAccount[]
  oauth2Tokens            OAuth2AccessToken[]
  saasInstallations       SaaSInstallation[]

  // 多租户OEM相关关系
  tenantUsers             TenantUser[]
  customerSales           Sale[] @relation("CustomerSales")

  // 权限管理相关关系
  userRoles               UserRole[]
  auditLogs               AuditLog[] @relation("UserAuditLogs")

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  images      String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems       OrderItem[]
  inventoryRecords InventoryRecord[]
  inventoryAlerts  InventoryAlert[]
  inventoryConfig  InventoryConfig?

  @@map("products")
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  status      String   @default("PENDING")
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items   OrderItem[]
  payment Payment?

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Payment {
  id        String   @id @default(cuid())
  orderId   String?  @unique
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  // Enhanced payment fields for new architecture
  amount    Float
  currency  String   @default("USD")
  method    String   // 'CREDIT_CARD', 'PAYPAL', 'BANK_TRANSFER', 'STRIPE', 'MOCK'
  paymentMethod String? // New enum-based payment method
  status    String   // 'PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 'PARTIALLY_REFUNDED'

  // Provider information
  provider  String?  // Payment provider name (e.g., 'stripe', 'paypal', 'mock')
  providerResponse String? // JSON response from payment provider

  // Transaction details
  transactionId String? // Provider transaction ID
  reference String?  // 外部支付系统的引用ID (legacy)
  stripePaymentIntentId String? @unique // Legacy Stripe field

  // Additional fields
  clientSecret String? // For client-side payment completion
  redirectUrl  String? // For redirect-based payments
  webhookUrl   String? // Webhook notification URL

  // Metadata and audit
  metadata  String?  // JSON格式的额外信息
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  refunds   Refund[]

  @@index([subscriptionId])
  @@index([status])
  @@index([provider])
  @@index([transactionId])
  @@index([stripePaymentIntentId])
  @@map("payments")
}

// New Refund model for the payment system
model Refund {
  id        String   @id @default(cuid())
  paymentId String
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  amount    Float
  currency  String   @default("USD")
  status    String   // 'PENDING', 'COMPLETED', 'FAILED'
  reason    String?

  // Provider information
  provider  String?  // Payment provider name
  providerRefundId String? // Provider's refund ID
  providerResponse String? // JSON response from provider

  // Metadata and audit
  metadata  String?  // JSON格式的额外信息
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
  @@index([status])
  @@index([provider])
  @@index([providerRefundId])
  @@map("refunds")
}

// SaaS 服务相关表

// SaaS 实例表
model SaasInstance {
  id            String   @id @default(cuid())
  userId        String
  instanceName  String
  subdomain     String   @unique
  customDomain  String?  @unique
  planId        String
  status        String   @default("active") // 'active', 'suspended', 'terminated'
  region        String   @default("us-east-1")
  version       String   @default("latest")
  settings      String   // JSON格式的实例配置
  resources     String   // JSON格式的资源配置
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          SaasPlan @relation(fields: [planId], references: [id])
  backups       SaasBackup[]
  metrics       SaasMetrics[]

  @@index([userId])
  @@index([subdomain])
  @@index([status])
  @@map("saas_instances")
}

// SaaS 计划表
model SaasPlan {
  id            String   @id @default(cuid())
  name          String
  displayName   String
  description   String?
  price         Float
  currency      String   @default("USD")
  billing       String   // 'monthly', 'yearly'
  features      String   // JSON格式的功能列表
  limits        String   // JSON格式的限制 (存储、带宽、用户数等)
  isActive      Boolean  @default(true)
  stripePriceId String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  instances     SaasInstance[]

  @@map("saas_plans")
}

// SaaS 备份表
model SaasBackup {
  id           String   @id @default(cuid())
  instanceId   String
  backupType   String   // 'manual', 'scheduled', 'pre-update'
  size         BigInt   // 备份大小 (bytes)
  status       String   @default("pending") // 'pending', 'completed', 'failed'
  storageUrl   String?  // 备份文件存储位置
  metadata     String?  // JSON格式的备份元数据
  createdAt    DateTime @default(now())
  completedAt  DateTime?

  // Relations
  instance     SaasInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@index([instanceId])
  @@index([status])
  @@index([createdAt])
  @@map("saas_backups")
}

// SaaS 指标表
model SaasMetrics {
  id           String   @id @default(cuid())
  instanceId   String
  metricType   String   // 'cpu', 'memory', 'storage', 'bandwidth', 'requests'
  value        Float
  unit         String   // '%', 'MB', 'GB', 'requests/min'
  timestamp    DateTime @default(now())

  // Relations
  instance     SaasInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@index([instanceId])
  @@index([metricType])
  @@index([timestamp])
  @@map("saas_metrics")
}

// 模板市场表
model Template {
  id            String   @id @default(cuid())
  name          String
  displayName   String
  description   String
  category      String   // 'ecommerce', 'blog', 'portfolio', 'business'
  tags          String   // JSON格式的标签数组
  pricing       String   // JSON格式的定价信息
  features      String   // JSON格式的功能列表
  preview       String   // 预览图片URL
  demoUrl       String?  // 演示网站URL
  downloadUrl   String?  // 下载链接
  version       String   @default("1.0.0")
  author        String
  authorEmail   String
  downloads     Int      @default(0)
  rating        Float    @default(0)
  reviewCount   Int      @default(0)
  status        String   @default("active") // 'active', 'deprecated', 'beta'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  purchases     TemplatePurchase[]

  @@index([category])
  @@index([status])
  @@index([downloads])
  @@index([rating])
  @@map("templates")
}

// 模板购买记录表
model TemplatePurchase {
  id           String   @id @default(cuid())
  userId       String
  templateId   String
  price        Float
  currency     String   @default("USD")
  licenseType  String   // 'single', 'extended', 'developer'
  status       String   @default("completed") // 'pending', 'completed', 'refunded'
  downloadCount Int     @default(0)
  maxDownloads Int      @default(5)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template     Template @relation(fields: [templateId], references: [id])

  @@index([userId])
  @@index([templateId])
  @@index([status])
  @@map("template_purchases")
}

// 多租户OEM系统表

// 租户表
model Tenant {
  id              String   @id @default(cuid())
  companyName     String
  contactName     String
  contactEmail    String   @unique
  contactPhone    String?
  agencyFee       Float
  agencyFeePaid   Boolean  @default(false)
  agencyLevel     String   // 'basic', 'industry', 'global'
  status          String   @default("pending") // 'pending', 'active', 'suspended', 'terminated'
  domain          String?  @unique
  subdomain       String?  @unique
  branding        String   // JSON格式的品牌定制信息
  settings        String   // JSON格式的租户设置
  contractStart   DateTime?
  contractEnd     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  users           TenantUser[]
  licenses        TenantLicense[]
  sales           Sale[]
  pricing         TenantPricing[]
  dataSync        TenantDataSync[]
  revenueSharing  RevenueSharing[] @relation("TenantRevenue")
  userRoles       UserRole[] @relation("TenantUserRoles")
  auditLogs       AuditLog[] @relation("TenantAuditLogs")

  @@index([status])
  @@index([agencyFeePaid])
  @@index([domain])
  @@map("tenants")
}

// 租户用户表
model TenantUser {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  role      String   @default("member") // 'admin', 'manager', 'member'
  status    String   @default("active") // 'active', 'suspended'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId])
  @@index([tenantId])
  @@index([userId])
  @@map("tenant_users")
}

// 产品价格控制表
model PriceControl {
  id            String   @id @default(cuid())
  productType   String   // 'plugin', 'saas-app', 'template'
  productId     String
  productName   String
  basePrice     Float    // Jiffoo设置的底价
  currency      String   @default("USD")
  minMargin     Float    @default(0) // 最低加价幅度 (%)
  maxDiscount   Float    @default(0) // 最大折扣幅度 (%)
  effectiveDate DateTime @default(now())
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tenantPricing TenantPricing[]

  @@unique([productType, productId])
  @@index([productType])
  @@index([productId])
  @@index([isActive])
  @@map("price_controls")
}

// 租户定价表
model TenantPricing {
  id              String   @id @default(cuid())
  tenantId        String
  priceControlId  String
  sellingPrice    Float
  marginAmount    Float    // 加价金额
  marginPercent   Float    // 加价百分比
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  tenant          Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  priceControl    PriceControl @relation(fields: [priceControlId], references: [id], onDelete: Cascade)

  @@unique([tenantId, priceControlId])
  @@index([tenantId])
  @@index([priceControlId])
  @@map("tenant_pricing")
}

// 租户许可证表
model TenantLicense {
  id                String   @id @default(cuid())
  tenantId          String
  productType       String   // 'plugin', 'saas-app', 'template'
  productId         String
  licenseType       String   // 'oem', 'reseller', 'distributor'
  authorizedFeatures String  // JSON格式的授权功能列表
  brandingRights    Boolean  @default(false)
  resaleRights      Boolean  @default(false)
  maxUsers          Int?     // 最大用户数限制
  maxInstances      Int?     // 最大实例数限制
  expiresAt         DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, productType, productId])
  @@index([tenantId])
  @@index([productType])
  @@index([productId])
  @@index([isActive])
  @@map("tenant_licenses")
}

// 销售记录表 (统一直销和OEM销售)
model Sale {
  id              String   @id @default(cuid())
  productType     String   // 'plugin', 'saas-app', 'template'
  productId       String
  productName     String
  customerId      String
  customerEmail   String

  // 销售渠道信息
  channel         String   // 'direct', 'oem-tenant'
  tenantId        String?  // 如果是租户销售

  // 定价信息
  sellingPrice    Float
  basePrice       Float    // Jiffoo底价
  marginAmount    Float    // 加价金额
  marginPercent   Float    // 加价百分比
  currency        String   @default("USD")

  // 分润信息
  jiffooRevenue   Float    // Jiffoo收入
  tenantRevenue   Float?   // 租户收入 (如果是OEM销售)
  platformFee     Float    @default(0) // 平台手续费

  // 支付信息
  paymentStatus   String   @default("pending") // 'pending', 'completed', 'failed', 'refunded'
  paymentMethod   String?
  paymentReference String?

  // 许可证信息
  licenseId       String?  // 关联的许可证ID
  licenseType     String   // 'trial', 'monthly', 'yearly', 'lifetime'

  // 时间信息
  saleDate        DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  tenant          Tenant?  @relation(fields: [tenantId], references: [id])
  customer        User     @relation("CustomerSales", fields: [customerId], references: [id])
  revenueSharing  RevenueSharing?

  @@index([channel])
  @@index([tenantId])
  @@index([customerId])
  @@index([productType])
  @@index([productId])
  @@index([paymentStatus])
  @@index([saleDate])
  @@map("sales")
}

// 租户数据同步配置表
model TenantDataSync {
  id              String   @id @default(cuid())
  tenantId        String
  syncType        String   // 'users', 'orders', 'products', 'analytics'
  syncEndpoint    String   // 租户数据接收接口
  syncFrequency   String   @default("daily") // 'realtime', 'hourly', 'daily', 'weekly'
  syncFormat      String   @default("json") // 'json', 'csv', 'xml'
  encryptionKey   String?  // 数据加密密钥
  isActive        Boolean  @default(true)
  lastSyncAt      DateTime?
  lastSyncStatus  String?  // 'success', 'failed', 'partial'
  syncCount       Int      @default(0)
  errorCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, syncType])
  @@index([tenantId])
  @@index([syncType])
  @@index([isActive])
  @@index([lastSyncAt])
  @@map("tenant_data_sync")
}

// 分润结算表
model RevenueSharing {
  id              String   @id @default(cuid())
  saleId          String   @unique
  tenantId        String

  // 收入分配
  totalAmount     Float
  jiffooShare     Float    // Jiffoo分成
  tenantShare     Float    // 租户分成
  platformFee     Float    // 平台手续费

  // 结算信息
  settlementStatus String  @default("pending") // 'pending', 'processing', 'completed', 'failed'
  settlementDate   DateTime?
  settlementMethod String? // 'bank_transfer', 'paypal', 'stripe'
  settlementReference String?

  // 时间信息
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  sale            Sale     @relation(fields: [saleId], references: [id])
  tenant          Tenant   @relation("TenantRevenue", fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([settlementStatus])
  @@index([settlementDate])
  @@map("revenue_sharing")
}

// 权限管理系统

// 角色表
model Role {
  id          String   @id @default(cuid())
  name        String   @unique // 'SUPER_ADMIN', 'ADMIN', 'TENANT_ADMIN', 'TENANT_MANAGER', 'USER'
  displayName String
  description String?
  level       Int      @default(0) // 权限级别，数字越大权限越高
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userRoles   UserRole[]
  rolePermissions RolePermission[]

  @@index([name])
  @@index([level])
  @@map("roles")
}

// 权限表
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // 'users.create', 'tenants.manage', 'sales.view'
  displayName String
  description String?
  module      String   // 'users', 'tenants', 'sales', 'plugins', 'templates'
  action      String   // 'create', 'read', 'update', 'delete', 'manage'
  resource    String?  // 具体资源，如 'own', 'all', 'tenant'
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@index([module])
  @@index([action])
  @@map("permissions")
}

// 用户角色关联表
model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  tenantId  String?  // 租户ID，null表示全局角色
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tenant    Tenant?  @relation("TenantUserRoles", fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, tenantId], name: "user_role_tenant_unique")
  @@index([userId])
  @@index([roleId])
  @@index([tenantId])
  @@map("user_roles")
}

// 角色权限关联表
model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

// 操作日志表
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  tenantId    String?
  action      String   // 'CREATE', 'UPDATE', 'DELETE', 'LOGIN', 'LOGOUT'
  module      String   // 'users', 'tenants', 'sales', 'plugins'
  resourceId  String?  // 被操作的资源ID
  resourceType String? // 被操作的资源类型
  oldValues   String?  // JSON格式的旧值
  newValues   String?  // JSON格式的新值
  ipAddress   String?
  userAgent   String?
  success     Boolean  @default(true)
  errorMessage String?
  createdAt   DateTime @default(now())

  // Relations
  user        User?    @relation("UserAuditLogs", fields: [userId], references: [id])
  tenant      Tenant?  @relation("TenantAuditLogs", fields: [tenantId], references: [id])

  @@index([userId])
  @@index([tenantId])
  @@index([action])
  @@index([module])
  @@index([createdAt])
  @@map("audit_logs")
}

// 库存记录表
model InventoryRecord {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  operation     String   // 'RESTOCK', 'SALE', 'RETURN', 'ADJUSTMENT', 'DAMAGE', 'TRANSFER', 'RESERVE', 'RELEASE'
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String?
  reference     String?  // 订单ID、退货ID等
  operatorId    String
  operator      User     @relation(fields: [operatorId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([productId])
  @@index([operation])
  @@index([createdAt])
}

// 库存警告表
model InventoryAlert {
  id           String   @id @default(cuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  alertType    String   // 'LOW_STOCK', 'OUT_OF_STOCK', 'OVERSTOCK', 'EXPIRING_SOON', 'SLOW_MOVING'
  threshold    Int
  currentStock Int
  message      String
  isResolved   Boolean  @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([productId])
  @@index([alertType])
  @@index([isResolved])
}

// 库存配置表
model InventoryConfig {
  id              String   @id @default(cuid())
  productId       String   @unique
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  minStock        Int      @default(10)
  maxStock        Int      @default(1000)
  reorderPoint    Int      @default(20)
  reorderQuantity Int      @default(100)
  leadTime        Int      @default(7) // 交货时间（天）
  autoReorder     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// 通知表
model Notification {
  id           String    @id @default(cuid())
  type         String    // 'EMAIL', 'SMS', 'PUSH', 'IN_APP', 'WEBHOOK'
  category     String    // 'ORDER', 'PAYMENT', 'INVENTORY', 'USER', 'SYSTEM', 'MARKETING', 'SECURITY'
  priority     String    @default("NORMAL") // 'LOW', 'NORMAL', 'HIGH', 'URGENT'
  status       String    @default("PENDING") // 'PENDING', 'SENT', 'DELIVERED', 'FAILED', 'CANCELLED'
  templateType String?   // 'ORDER_CONFIRMATION', 'LOW_STOCK_ALERT', etc.
  recipient    String
  subject      String
  content      String
  data         String?   // JSON格式的额外数据
  scheduledAt  DateTime?
  sentAt       DateTime?
  deliveredAt  DateTime?
  failedAt     DateTime?
  errorMessage String?
  retryCount   Int       @default(0)
  maxRetries   Int       @default(3)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([type])
  @@index([category])
  @@index([status])
  @@index([recipient])
  @@index([scheduledAt])
}

// 通知模板表
model NotificationTemplate {
  id          String   @id @default(cuid())
  type        String   @unique // 'ORDER_CONFIRMATION', 'LOW_STOCK_ALERT', etc.
  name        String
  description String?
  subject     String
  content     String
  variables   String   // JSON格式的变量列表
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 商业化相关表

// 插件许可证表
model PluginLicense {
  id            String   @id @default(cuid())
  pluginName    String
  licenseKey    String   @unique
  userId        String
  licenseType   String   // 'trial', 'monthly', 'yearly', 'lifetime'
  status        String   @default("active") // 'active', 'expired', 'suspended', 'revoked'
  features      String   // JSON格式的功能列表
  usageLimits   String?  // JSON格式的使用限制
  expiresAt     DateTime?
  activatedAt   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageRecords  PluginUsage[]

  @@index([pluginName])
  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@map("plugin_licenses")
}

// 插件使用记录表
model PluginUsage {
  id           String   @id @default(cuid())
  licenseId    String
  featureName  String
  usageCount   Int      @default(0)
  lastUsedAt   DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relations
  license      PluginLicense @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([licenseId, featureName], name: "licenseId_featureName")
  @@index([licenseId])
  @@index([featureName])
  @@index([lastUsedAt])
  @@map("plugin_usage")
}

// 订阅计划表
model SubscriptionPlan {
  id           String   @id @default(cuid())
  name         String
  description  String?
  price        Float
  currency     String   @default("USD")
  interval     String   // 'month', 'year'
  features     String   // JSON格式的功能列表
  limits       String?  // JSON格式的限制
  isActive     Boolean  @default(true)
  stripePriceId String? @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("subscription_plans")
}

// 用户订阅表
model Subscription {
  id                String   @id @default(cuid())
  userId            String
  planId            String
  status            String   @default("active") // 'active', 'canceled', 'past_due', 'unpaid'
  stripeSubscriptionId String? @unique
  stripeCustomerId  String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              SubscriptionPlan @relation(fields: [planId], references: [id])
  payments          Payment[]

  @@index([userId])
  @@index([planId])
  @@index([status])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}



// 通知偏好设置表
model NotificationPreference {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     String   // 'ORDER', 'PAYMENT', 'INVENTORY', 'USER', 'SYSTEM', 'MARKETING', 'SECURITY'
  emailEnabled Boolean  @default(true)
  smsEnabled   Boolean  @default(false)
  pushEnabled  Boolean  @default(true)
  inAppEnabled Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, category])
}

// 多语言支持表
model TranslationKey {
  id          String @id @default(cuid())
  key         String
  namespace   String @default("common")
  defaultValue String?
  description String?
  context     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  translations Translation[]

  @@unique([key, namespace])
  @@index([namespace])
  @@map("translation_keys")
}

model Translation {
  id         String @id @default(cuid())
  key        String
  namespace  String @default("common")
  language   String // SupportedLanguage enum
  value      String
  pluralForm String?
  context    String?
  isApproved Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String?
  updatedBy  String?

  translationKey TranslationKey @relation(fields: [key, namespace], references: [key, namespace], onDelete: Cascade)
  creator        User?          @relation("TranslationCreator", fields: [createdBy], references: [id])
  updater        User?          @relation("TranslationUpdater", fields: [updatedBy], references: [id])

  @@unique([key, namespace, language])
  @@index([language])
  @@index([namespace, language])
  @@index([isApproved])
  @@map("translations")
}

model UserLanguagePreference {
  id               String @id @default(cuid())
  userId           String @unique
  preferredLanguage String @default("zh-CN") // SupportedLanguage enum
  timezone         String @default("Asia/Shanghai")
  dateFormat       String @default("YYYY-MM-DD")
  timeFormat       String @default("HH:mm:ss")
  numberFormat     String @default("1,234.56")
  currencyFormat   String @default("¥1,234.56")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_language_preferences")
}

// OAuth 2.0 和社交登录相关表

// 社交账户表
model SocialAccount {
  id           String   @id @default(cuid())
  userId       String
  provider     String   // 'wechat', 'google', 'github', 'alipay'
  providerId   String   // 第三方平台的用户ID
  accessToken  String?  // 访问令牌
  refreshToken String?  // 刷新令牌
  profile      String?  // JSON格式的用户资料
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
  @@index([provider])
  @@map("social_accounts")
}

// OAuth 2.0 授权码表
model OAuth2AuthorizationCode {
  id          String   @id @default(cuid())
  code        String   @unique
  state       String
  userId      String
  clientId    String
  scope       String
  redirectUri String
  expiresAt   DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([code])
  @@index([clientId])
  @@index([expiresAt])
  @@map("oauth2_authorization_codes")
}

// OAuth 2.0 访问令牌表
model OAuth2AccessToken {
  id           String   @id @default(cuid())
  accessToken  String   @unique
  refreshToken String?  @unique
  userId       String
  clientId     String
  scope        String
  tokenType    String   @default("Bearer")
  expiresAt    DateTime
  revoked      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([clientId])
  @@index([expiresAt])
  @@index([revoked])
  @@map("oauth2_access_tokens")
}

// SaaS 应用市场表
model SaaSApplication {
  id            String   @id @default(cuid())
  name          String
  description   String
  version       String
  author        String
  authorId      String   // 应用开发者ID
  category      String   // 'productivity', 'analytics', 'marketing', 'finance'
  price         Float    // 月费价格 (分)
  currency      String   @default("USD")
  billingType   String   @default("monthly") // 'monthly', 'yearly', 'one-time', 'usage-based'

  // 集成配置
  apiEndpoint   String   // 应用API端点
  webhookUrl    String?  // Webhook通知URL
  ssoEnabled    Boolean  @default(false)
  dataSync      Boolean  @default(false)

  // 应用元数据
  logo          String
  screenshots   String   // JSON数组
  features      String   // JSON数组
  requirements  String   // JSON数组
  documentation String
  support       String

  // 业务信息
  isActive      Boolean  @default(false)
  isApproved    Boolean  @default(false)
  totalInstalls Int      @default(0)
  rating        Float    @default(0)
  reviewCount   Int      @default(0)
  revenueShare  Float    @default(30) // Jiffoo平台分成百分比

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  installations SaaSInstallation[]

  @@index([authorId])
  @@index([category])
  @@index([isActive])
  @@index([isApproved])
  @@map("saas_applications")
}

// SaaS 应用安装表
model SaaSInstallation {
  id             String   @id @default(cuid())
  userId         String
  appId          String
  subscriptionId String
  status         String   @default("active") // 'active', 'suspended', 'cancelled'
  installedAt    DateTime @default(now())
  lastAccessedAt DateTime @default(now())

  // SSO 配置
  ssoConfig      String?  // JSON格式的SSO配置

  // 数据同步配置
  syncConfig     String?  // JSON格式的同步配置

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  app  SaaSApplication @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([userId, appId])
  @@index([userId])
  @@index([appId])
  @@index([status])
  @@map("saas_installations")
}
