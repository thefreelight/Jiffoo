// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders                   Order[]
  inventoryRecords         InventoryRecord[]
  notificationPreferences  NotificationPreference[]
  languagePreference       UserLanguagePreference?
  createdTranslations      Translation[] @relation("TranslationCreator")
  updatedTranslations      Translation[] @relation("TranslationUpdater")

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  images      String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems       OrderItem[]
  inventoryRecords InventoryRecord[]
  inventoryAlerts  InventoryAlert[]
  inventoryConfig  InventoryConfig?

  @@map("products")
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  status      String   @default("PENDING")
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items   OrderItem[]
  payment Payment?

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Payment {
  id        String   @id @default(cuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount    Float
  method    String   // 'CREDIT_CARD', 'PAYPAL', 'BANK_TRANSFER'
  status    String   // 'PENDING', 'COMPLETED', 'FAILED', 'REFUNDED'
  reference String?  // 外部支付系统的引用ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 库存记录表
model InventoryRecord {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  operation     String   // 'RESTOCK', 'SALE', 'RETURN', 'ADJUSTMENT', 'DAMAGE', 'TRANSFER', 'RESERVE', 'RELEASE'
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String?
  reference     String?  // 订单ID、退货ID等
  operatorId    String
  operator      User     @relation(fields: [operatorId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([productId])
  @@index([operation])
  @@index([createdAt])
}

// 库存警告表
model InventoryAlert {
  id           String   @id @default(cuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  alertType    String   // 'LOW_STOCK', 'OUT_OF_STOCK', 'OVERSTOCK', 'EXPIRING_SOON', 'SLOW_MOVING'
  threshold    Int
  currentStock Int
  message      String
  isResolved   Boolean  @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([productId])
  @@index([alertType])
  @@index([isResolved])
}

// 库存配置表
model InventoryConfig {
  id              String   @id @default(cuid())
  productId       String   @unique
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  minStock        Int      @default(10)
  maxStock        Int      @default(1000)
  reorderPoint    Int      @default(20)
  reorderQuantity Int      @default(100)
  leadTime        Int      @default(7) // 交货时间（天）
  autoReorder     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// 通知表
model Notification {
  id           String    @id @default(cuid())
  type         String    // 'EMAIL', 'SMS', 'PUSH', 'IN_APP', 'WEBHOOK'
  category     String    // 'ORDER', 'PAYMENT', 'INVENTORY', 'USER', 'SYSTEM', 'MARKETING', 'SECURITY'
  priority     String    @default("NORMAL") // 'LOW', 'NORMAL', 'HIGH', 'URGENT'
  status       String    @default("PENDING") // 'PENDING', 'SENT', 'DELIVERED', 'FAILED', 'CANCELLED'
  templateType String?   // 'ORDER_CONFIRMATION', 'LOW_STOCK_ALERT', etc.
  recipient    String
  subject      String
  content      String
  data         String?   // JSON格式的额外数据
  scheduledAt  DateTime?
  sentAt       DateTime?
  deliveredAt  DateTime?
  failedAt     DateTime?
  errorMessage String?
  retryCount   Int       @default(0)
  maxRetries   Int       @default(3)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([type])
  @@index([category])
  @@index([status])
  @@index([recipient])
  @@index([scheduledAt])
}

// 通知模板表
model NotificationTemplate {
  id          String   @id @default(cuid())
  type        String   @unique // 'ORDER_CONFIRMATION', 'LOW_STOCK_ALERT', etc.
  name        String
  description String?
  subject     String
  content     String
  variables   String   // JSON格式的变量列表
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 通知偏好设置表
model NotificationPreference {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     String   // 'ORDER', 'PAYMENT', 'INVENTORY', 'USER', 'SYSTEM', 'MARKETING', 'SECURITY'
  emailEnabled Boolean  @default(true)
  smsEnabled   Boolean  @default(false)
  pushEnabled  Boolean  @default(true)
  inAppEnabled Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, category])
}

// 多语言支持表
model TranslationKey {
  id          String @id @default(cuid())
  key         String
  namespace   String @default("common")
  defaultValue String?
  description String?
  context     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  translations Translation[]

  @@unique([key, namespace])
  @@index([namespace])
  @@map("translation_keys")
}

model Translation {
  id         String @id @default(cuid())
  key        String
  namespace  String @default("common")
  language   String // SupportedLanguage enum
  value      String
  pluralForm String?
  context    String?
  isApproved Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String?
  updatedBy  String?

  translationKey TranslationKey @relation(fields: [key, namespace], references: [key, namespace], onDelete: Cascade)
  creator        User?          @relation("TranslationCreator", fields: [createdBy], references: [id])
  updater        User?          @relation("TranslationUpdater", fields: [updatedBy], references: [id])

  @@unique([key, namespace, language])
  @@index([language])
  @@index([namespace, language])
  @@index([isApproved])
  @@map("translations")
}

model UserLanguagePreference {
  id               String @id @default(cuid())
  userId           String @unique
  preferredLanguage String @default("zh-CN") // SupportedLanguage enum
  timezone         String @default("Asia/Shanghai")
  dateFormat       String @default("YYYY-MM-DD")
  timeFormat       String @default("HH:mm:ss")
  numberFormat     String @default("1,234.56")
  currencyFormat   String @default("¥1,234.56")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_language_preferences")
}
