以下是为你的商城系统设计的一份完整、简明、适合 AI 辅助开发的核心功能开发文档（开发者视角），采用 Fastify + TypeScript 技术栈。


---

🛒 Fastify Mall Core - 开发文档 v1.0


1. 项目架构总览

- 框架：Fastify + TypeScript
- ORM：Prisma
- 数据库：PostgreSQL
- 缓存：Redis（可选）
- 身份认证：JWT
- 插件系统：基于 Hook + Metadata 注入


目录结构：
src/
├── core/              # 核心模块
│   ├── user/
│   ├── product/
│   ├── order/
│   ├── payment/
│   └── auth/
├── plugins/           # 插件系统入口（后续扩展）
├── config/            # 配置文件
├── utils/             # 工具函数
├── prisma/            # Prisma schema & client
└── server.ts          # Fastify 启动入口


---

2. 核心功能模块


2.1 用户模块（src/core/user）


接口定义

暂时无法在飞书文档外展示此内容

数据结构

User {
  id: string
  email: string
  username: string
  password: string
  avatar?: string
  role: 'user' | 'admin'
  createdAt: Date
  updatedAt: Date
}


---

2.2 商品模块（src/core/product）


接口定义

暂时无法在飞书文档外展示此内容

数据结构

Product {
  id: string
  name: string
  description?: string
  price: number
  stock: number
  images: string[]
  createdAt: Date
  updatedAt: Date
}


---

2.3 订单模块（src/core/order）


接口定义

暂时无法在飞书文档外展示此内容

数据结构

Order {
  id: string
  userId: string
  items: OrderItem[]
  status: 'pending' | 'paid' | 'cancelled'
  totalAmount: number
  createdAt: Date
}
OrderItem {
  productId: string
  quantity: number
  unitPrice: number
}


---

2.4 支付模块（src/core/payment）


接口定义

暂时无法在飞书文档外展示此内容


---

3. 插件系统预留（src/plugins）

interface Plugin {
  name: string
  register(app: FastifyInstance): Promise<void>
}
未来支持自动加载 plugins/*.ts，并执行其 register 方法挂载路由。

---

4. 鉴权和中间件

- 所有 /api/* 接口使用 JWT 鉴权中间件
- 管理端接口需校验 user.role === 'admin'


---

5. 环境变量（.env）

DATABASE_URL=postgresql://user:password@localhost:5432/mall
JWT_SECRET=your-secret


---

6. 启动方式

pnpm install
pnpm dev


---

7. 数据库初始化（Prisma）

npx prisma generate
npx prisma migrate dev --name init


---




