name: Deploy to Jiffoo Mall Core Dev

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'jiffoo-mall-core-dev'
        type: choice
        options:
        - jiffoo-mall-core-dev
        - jiffoo-mall-core-staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: thefreelight/jiffoo-mall-core

jobs:
  build-and-deploy:
    runs-on: [self-hosted, singapore]
    environment: development
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 📦 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=dev-deployment-{{sha}}
          
    - name: 🐳 Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-deployment-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🐳 Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:dev-deployment-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🐳 Build and push Admin image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.admin
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:dev-deployment-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🎯 Set target namespace
      id: namespace
      run: |
        if [ "${{ github.event.inputs.environment }}" != "" ]; then
          echo "namespace=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "namespace=jiffoo-mall-core-dev" >> $GITHUB_OUTPUT
        fi
        
    - name: 🏗️ Create namespace if not exists
      run: |
        kubectl get namespace ${{ steps.namespace.outputs.namespace }} || \
        kubectl create namespace ${{ steps.namespace.outputs.namespace }}
        
    - name: 🔐 Create secrets if not exists
      run: |
        # Create backend secrets
        kubectl get secret backend-secrets -n ${{ steps.namespace.outputs.namespace }} || \
        kubectl create secret generic backend-secrets -n ${{ steps.namespace.outputs.namespace }} \
          --from-literal=database-url="postgresql://jiffoo:jiffoo123@postgres-service:5432/jiffoo_mall_core_dev" \
          --from-literal=redis-url="redis://redis-service:6379" \
          --from-literal=jwt-secret="jiffoo-mall-core-dev-jwt-secret-2025" \
          --from-literal=encryption-key="jiffoo-mall-core-dev-encryption-key-2025"
          
        # Create image pull secret
        kubectl get secret ghcr-secret -n ${{ steps.namespace.outputs.namespace }} || \
        kubectl create secret docker-registry ghcr-secret -n ${{ steps.namespace.outputs.namespace }} \
          --docker-server=ghcr.io \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GITHUB_TOKEN }} \
          --docker-email=${{ github.actor }}@users.noreply.github.com
          
    - name: 🗄️ Deploy PostgreSQL
      run: |
        # Apply PostgreSQL configuration
        kubectl apply -f k8s-examples/postgres.yaml -n ${{ steps.namespace.outputs.namespace }}
        
        # Wait for PostgreSQL to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/postgres -n ${{ steps.namespace.outputs.namespace }}
        
    - name: 🔴 Deploy Redis
      run: |
        # Apply Redis configuration
        kubectl apply -f k8s-examples/redis.yaml -n ${{ steps.namespace.outputs.namespace }}
        
        # Wait for Redis to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/redis -n ${{ steps.namespace.outputs.namespace }}
        
    - name: 🗃️ Run Database Migration
      run: |
        # Create migration job
        cat <<EOF | kubectl apply -f -
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: db-migration-${{ github.run_number }}
          namespace: ${{ steps.namespace.outputs.namespace }}
          labels:
            app: db-migration
            run: "${{ github.run_number }}"
        spec:
          ttlSecondsAfterFinished: 300
          template:
            metadata:
              labels:
                app: db-migration
                run: "${{ github.run_number }}"
            spec:
              restartPolicy: Never
              containers:
              - name: migration
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-deployment-${{ github.sha }}
                command: ["/bin/sh"]
                args:
                  - -c
                  - |
                    echo "🗃️ Running database migrations..."
                    cd /app
                    npx prisma migrate deploy
                    echo "✅ Database migrations completed!"
                env:
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: backend-secrets
                      key: database-url
                resources:
                  requests:
                    cpu: 100m
                    memory: 256Mi
                  limits:
                    cpu: 500m
                    memory: 512Mi
              imagePullSecrets:
              - name: ghcr-secret
        EOF
        
        # Wait for migration to complete
        kubectl wait --for=condition=complete --timeout=300s job/db-migration-${{ github.run_number }} -n ${{ steps.namespace.outputs.namespace }}
        
        # Show migration logs
        kubectl logs job/db-migration-${{ github.run_number }} -n ${{ steps.namespace.outputs.namespace }}
        
    - name: 🚀 Deploy Backend
      run: |
        # Create backend deployment
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: backend
          namespace: ${{ steps.namespace.outputs.namespace }}
          labels:
            app: backend
            environment: development
            version: "1.0.0"
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: backend
          template:
            metadata:
              labels:
                app: backend
                environment: development
                version: "1.0.0"
            spec:
              containers:
              - name: backend
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-deployment-${{ github.sha }}
                ports:
                - containerPort: 8001
                  name: http
                env:
                - name: NODE_ENV
                  value: development
                - name: PORT
                  value: "8001"
                - name: POSTGRES_HOST
                  value: postgres-service
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: backend-secrets
                      key: database-url
                - name: REDIS_URL
                  valueFrom:
                    secretKeyRef:
                      name: backend-secrets
                      key: redis-url
                - name: JWT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: backend-secrets
                      key: jwt-secret
                - name: ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      name: backend-secrets
                      key: encryption-key
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8001
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 8001
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  timeoutSeconds: 3
                  failureThreshold: 3
                resources:
                  requests:
                    cpu: 200m
                    memory: 256Mi
                  limits:
                    cpu: 500m
                    memory: 512Mi
              imagePullSecrets:
              - name: ghcr-secret
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: backend-service
          namespace: ${{ steps.namespace.outputs.namespace }}
          labels:
            app: backend
        spec:
          selector:
            app: backend
          ports:
          - port: 8001
            targetPort: 8001
            name: http
          type: ClusterIP
        EOF
        
        # Wait for backend to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/backend -n ${{ steps.namespace.outputs.namespace }}
        
    - name: 🌐 Deploy Frontend
      run: |
        # Create frontend deployment
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: frontend
          namespace: ${{ steps.namespace.outputs.namespace }}
          labels:
            app: frontend
            environment: development
            version: "1.0.0"
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: frontend
          template:
            metadata:
              labels:
                app: frontend
                environment: development
                version: "1.0.0"
            spec:
              containers:
              - name: frontend
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:dev-deployment-${{ github.sha }}
                ports:
                - containerPort: 3000
                  name: http
                env:
                - name: NODE_ENV
                  value: development
                - name: NEXT_PUBLIC_API_URL
                  value: http://backend-service:8001
                resources:
                  requests:
                    cpu: 100m
                    memory: 128Mi
                  limits:
                    cpu: 300m
                    memory: 256Mi
              imagePullSecrets:
              - name: ghcr-secret
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: frontend-service
          namespace: ${{ steps.namespace.outputs.namespace }}
          labels:
            app: frontend
        spec:
          selector:
            app: frontend
          ports:
          - port: 3000
            targetPort: 3000
            name: http
          type: ClusterIP
        EOF
        
        # Wait for frontend to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/frontend -n ${{ steps.namespace.outputs.namespace }}
        
    - name: 🔧 Deploy Admin
      run: |
        # Create admin deployment
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: admin
          namespace: ${{ steps.namespace.outputs.namespace }}
          labels:
            app: admin
            environment: development
            version: "1.0.0"
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: admin
          template:
            metadata:
              labels:
                app: admin
                environment: development
                version: "1.0.0"
            spec:
              containers:
              - name: admin
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:dev-deployment-${{ github.sha }}
                ports:
                - containerPort: 3001
                  name: http
                env:
                - name: NODE_ENV
                  value: development
                - name: NEXT_PUBLIC_API_URL
                  value: http://backend-service:8001
                resources:
                  requests:
                    cpu: 100m
                    memory: 128Mi
                  limits:
                    cpu: 300m
                    memory: 256Mi
              imagePullSecrets:
              - name: ghcr-secret
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: admin-service
          namespace: ${{ steps.namespace.outputs.namespace }}
          labels:
            app: admin
        spec:
          selector:
            app: admin
          ports:
          - port: 3001
            targetPort: 3001
            name: http
          type: ClusterIP
        EOF
        
        # Wait for admin to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/admin -n ${{ steps.namespace.outputs.namespace }}
        
    - name: 🌐 Create Ingress
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: jiffoo-mall-core-ingress
          namespace: ${{ steps.namespace.outputs.namespace }}
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/ssl-redirect: "false"
        spec:
          ingressClassName: nginx
          rules:
          - host: jiffoo-mall-core-dev.local
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: frontend-service
                    port:
                      number: 3000
              - path: /api
                pathType: Prefix
                backend:
                  service:
                    name: backend-service
                    port:
                      number: 8001
              - path: /admin
                pathType: Prefix
                backend:
                  service:
                    name: admin-service
                    port:
                      number: 3001
        EOF
        
    - name: ✅ Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📊 Deployment Summary:"
        echo "======================="
        kubectl get all -n ${{ steps.namespace.outputs.namespace }}
        echo ""
        echo "🌐 Access URLs:"
        echo "Frontend: http://jiffoo-mall-core-dev.local"
        echo "Backend API: http://jiffoo-mall-core-dev.local/api"
        echo "Admin Panel: http://jiffoo-mall-core-dev.local/admin"
        echo ""
        echo "🔍 To check logs:"
        echo "kubectl logs -f deployment/backend -n ${{ steps.namespace.outputs.namespace }}"
        echo "kubectl logs -f deployment/frontend -n ${{ steps.namespace.outputs.namespace }}"
        echo "kubectl logs -f deployment/admin -n ${{ steps.namespace.outputs.namespace }}"